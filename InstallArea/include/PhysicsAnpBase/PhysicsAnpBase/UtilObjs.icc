// -*- c++ -*-
#ifndef ANP_UTILOBJS_ICC
#define ANP_UTILOBJS_ICC

namespace Anp
{  
  //======================================================================================================
  template<class T> inline bool SortObjectByPt::operator()(const Ptr<T> &lhs, const Ptr<T> &rhs) 
  { 
    return lhs->GetFourMom().GetPt() > rhs->GetFourMom().GetPt();
  }

  //======================================================================================================
  template<class T> inline bool SortObjectByEnergy::operator()(const Ptr<T> &lhs, const Ptr<T> &rhs) 
  { 
    return lhs->GetFourMom().GetE() > rhs->GetFourMom().GetE();
  }

  //======================================================================================================
  template<class T> inline bool SortObjectByMass::operator()(const Ptr<T> &lhs, const Ptr<T> &rhs) 
  { 
    return lhs->GetFourMom().GetM() > rhs->GetFourMom().GetM();
  }

  //======================================================================================================
  template<class T> inline bool SortObjectByDR::operator()(const Ptr<T> &lhs, const Ptr<T> &rhs) 
  { 
    return lhs->GetFourMom().GetDR(p) < rhs->GetFourMom().GetDR(p);
  }

  //======================================================================================================  
  template<class T> inline bool SortObjectByVar::operator()(const Ptr<T> &lhs, const Ptr<T> &rhs) 
  { 
    double val_rhs = 0.0;
    double val_lhs = 0.0;
    
    if(!lhs->GetVar(var, val_lhs) || !rhs->GetVar(var, val_rhs)) {
      throw std::runtime_error("SortObjectByVar - missing var: " + Var::AsStr(var));
    }
    
    return val_lhs < val_rhs;
  }
}

#endif
